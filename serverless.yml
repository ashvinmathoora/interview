# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: ${file(./conf/lambda.yml):servicename}
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: ${file(./conf/lambda.yml):runtime}
  stage: ${file(./conf/lambda.yml):stage}
  region: ${file(./conf/lambda.yml):region}

package:
  exclude:
  - .git/**
  - .circleci/**
  - .gitignore/**
  - cloudformation/**
  - bin/**
  - conf/**

# you can define service wide environment variables here
environment:
  variable1: value1
  variable2: value2
  variable3: value3


functions:
  helloWorld:
    handler: handler.hello
    name: helloWorld
    events:
     - http:
         path: hello
         method: get
    memorySize: ${file(./conf/lambda.yml):memorySize}
    role: 
       !GetAtt InterviewLambdaASMRole.Arn
    runtime: ${file(./conf/lambda.yml):runtime}
    environment:
      environment: dev
      interviewee: ${file(./conf/lambda.yml):interviewee}
      stage: ${file(./conf/lambda.yml):stage}
      S3BucketName: ${file(./conf/lambda.yml):S3BucketName}
      DestFile: ${file(./conf/lambda.yml):DestFile}
      Version: ${file(./conf/lambda.yml):Version}
    tags:
      foo: bar

# you can add CloudFormation resource templates here
resources:
  Resources:

    InterviewLambdaASMRole:
      Type: "AWS::IAM::Role"
      Properties:
       RoleName: InterviewLambdaASMRole
       AssumeRolePolicyDocument:
         Version: "2012-10-17"
         Statement:
           -
             Effect: "Allow"
             Principal:
               Service:
                 - "lambda.amazonaws.com"
             Action:
                 - "sts:AssumeRole"
       Path: "/"
       ManagedPolicyArns:
           - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

    InterviewLambdaASMRolePolicy:
     Type: "AWS::IAM::Policy"
     Properties:
       PolicyName: "InterviewLambdaASMRolePolicy"
       Roles:
           -
             Ref: "InterviewLambdaASMRole"
       PolicyDocument:
         Version: "2012-10-17"
         Statement:
           -
             Resource:
                - "arn:aws:s3:::${file(./conf/lambda.yml):S3BucketName}"
                - "arn:aws:s3:::${file(./conf/lambda.yml):S3BucketName}/*"
             Effect: "Allow"
             Action:
                - s3:Get*
                - s3:List*
                - s3:Put*

    S3BucketToWriteTo:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${file(./conf/lambda.yml):S3BucketName}
        PublicAccessBlockConfiguration:
           BlockPublicAcls: true
           BlockPublicPolicy: true
           IgnorePublicAcls: true
           RestrictPublicBuckets: true


  Outputs:
     BucketName:
       Description: "S3 Bucket Created to Output text file"
       Value: !Ref S3BucketToWriteTo

     InterviewLambdaASMRoleArn:
       Description: ""
       Value: !GetAtt InterviewLambdaASMRole.Arn
